let sysname = substitute(system('uname'), "\n", "", "")

" let g:loaded_netrwPlugin = 1

" python path {{{

if sysname == "Darwin"
  let g:python3_host_prog = '/usr/local/bin/python3.7'
  let g:python_host_prog = '/usr/local/bin/python'
elseif sysname == "Linux"
  let g:python3_host_prog  = '/usr/bin/python3'
  let g:python_host_prog  = '/usr/bin/python'
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
""" P L U G I N   O P T I O N S
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:syntastic_javascript_checkers=['eslint']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

""" Prettier
command! -nargs=0 Prettier :CocCommand prettier.formatFile
" let g:prettier#config#tab_width = 1
" let g:prettier#config#use_tabs = 'true'

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
""" Ale
" In ~/.vim/vimrc, or somewhere similar.
" let g:ale_fixers = {
" \   '*': ['remove_trailing_lines', 'trim_whitespace'],
" \   'javascript': ['prettier'],
" \   'typescript': ['prettier'],
" \}
" set this to 1 to fix files when you save
" let g:ale_fix_on_save = 0
" Set this. Airline will handle the rest.
" let g:airline#extensions#ale#enabled = 1
""" Oceanic next
" Theme
syntax enable
" for vim 7
set t_Co=256

" for vim 8
if (has("termguicolors"))
 set termguicolors
endif

" colorscheme OceanicNext
" let g:gruvbox_contrast_light = 'medium'
" set background=dark    " Setting dark mode
" set background=light   " Setting light mode
colorscheme gruvbox
" let g:airline_theme='solarized'
" let g:airline_theme='oceanicnext'
""" bufexplorer
let g:bufExplorerDetailedHelp=1     " show full help text by default
" let g:bufExplorerShowRelativePath=1 " use relative paths
let g:bufExplorerShowUnlisted=1     " display unlisted buffers

""" NERDCommenter
let NERDCreateDefaultMappings=0 " disable default mappings
let NERDMenuMode=0              " disable menu
let NERDSpaceDelims=1           " place spaces after comment chars
let NERDDefaultNesting=0        " don't recomment commented lines

""" NERDTree
let NERDTreeShowHidden=1
let NERDTreeChDirMode=3
map <leader>r :NERDTreeFind<cr>
" How can I open a NERDTree automatically when vim starts up if no files were specified?
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" How can I open NERDTree automatically when vim starts up on opening a directory?
" set backupcopy=yes
" easy buffer menu , by using tab in terminal mode
" set wildchar=<Tab> wildmenu wildmode=full
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
" How can I close vim if the only window left open is a NERDTree?
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
""" UltiSnips
" let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips']
""" fzf
set rtp+=/usr/local/opt/fzf
" Default fzf layout
" - down / up / left / right
let g:fzf_layout = { 'down': '~40%' }
" Customize fzf colors to match your color scheme
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'
" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

" [Commands] --expect expression for directly executing the command
let g:fzf_commands_expect = 'alt-enter,ctrl-x'

let $FZF_DEFAULT_COMMAND='rg --files --smart-case'

let g:rg_command = '
      \ rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --color "always"
      \ --glob "!*.{min.js,swp,o,zip}"
      \ --glob "!{yarn.lock,yarnw}"
      \ --glob "!{.git,node_modules,.mirror}/*" '
command! -bang -nargs=* Find call fzf#vim#grep(g:rg_command .shellescape(<q-args>), 1, <bang>0)

" Likewise, Files command with preview window
command! -bang -nargs=? -complete=dir Files
  \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

function! s:fzf_statusline()
  " Override statusline as you like
  highlight fzf1 ctermfg=161 ctermbg=251
  highlight fzf2 ctermfg=23 ctermbg=251
  highlight fzf3 ctermfg=237 ctermbg=251
  setlocal statusline=%#fzf1#\ >\ %#fzf2#fz%#fzf3#f
endfunction

autocmd! User FzfStatusLine call <SID>fzf_statusline()
""" JSDOCS
" let g:jsdoc_enable_es6 = 1
""" vim test
" let g:test#javascript#jest#file_pattern = '\v(__tests__/.*|(spec|test))\.(js|jsx|coffee|ts|tsx)$'
" let test#strategy = {
        " \ 'nearest': 'neovim',
        " \ 'file': 'neovim',
        " \ 'suite': 'basic',
" \}
" let g:test#preserve_screen = 1
""" let test#neovim#term_position = "vert"
" Run jest for current file
" autocmd FileType javascript,typescript nmap <buffer> <leader>tn :TestNearest<cr>
" autocmd FileType javascript,typescript nmap <buffer> <leader>ta :TestSuite<cr>
" autocmd FileType javascript,typescript nmap <buffer> <leader>tt :TestFile<cr>
" Run jest for current test
" nnoremap <leader>tn :call CocAction('runCommand', 'jest.singleTest')<CR>
" nnoremap <leader>tt :call  CocAction('runCommand', 'jest.fileTest', ['%'])<CR>
" Run jest for current project
" Init jest in current cwd, require global jest command exists
" command! JestInit :call CocAction('runCommand', 'jest.init')
" command! -nargs=0 Jest :call  CocAction('runCommand', 'jest.projectTest')

" Run jest for current file
" command! -nargs=0 JestCurrent :call  CocAction('runCommand', 'jest.fileTest', ['%'])

" Run jest for current test
nnoremap <leader>tn :call CocAction('runCommand', 'jest.singleTest')<CR>


""" terminal colors
let g:terminal_color_0  = '#282828' " dark0
let g:terminal_color_1  = '#cc241d' " neutral_red
let g:terminal_color_2  = '#98971a' " neutral_green
let g:terminal_color_3  = '#d79921' " neutral_yellow
let g:terminal_color_4  = '#258588' " neutral_blue
let g:terminal_color_5  = '#b16286' " neutral_purple
let g:terminal_color_6  = '#689d6a' " neutral_aqua
let g:terminal_color_7  = '#a89984' " light4
let g:terminal_color_8  = '#928374' " gray_245
let g:terminal_color_9  = '#fb4934' " bright_red
let g:terminal_color_10 = '#b8bb26' " bright_green
let g:terminal_color_11 = '#fabd2f' " bright_yellow
let g:terminal_color_12 = '#83a598' " bright_blue
let g:terminal_color_13 = '#d3869b' " bright_purple
let g:terminal_color_14 = '#8ec07c' " bright_aqua
let g:terminal_color_15 = '#ebdbb2' " light1

""" terminal :: map terminal NORMAL mode to ctrl-o
if has('nvim')
  tmap <C-o> <C-\><C-n>
endif
""" nnoremap <leader>t :terminal<cr>

augroup omnifuncs
  autocmd!
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript,javascript.jsx setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup end

" set filetypes as typescript.tsx
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.tsx
